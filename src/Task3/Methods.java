package Task3;

public class Methods {

    /*
    1. Для создания метода необходимо иницализировать следующие поля :
    - модификаторы (public, static) - не обязательное поле ;
    - тип_возвращаемого_значения (void - указывает на то что метод ничего не возвращает) ;
    - название_метода ;
    - параметры - не обязательное поле - с помощью параметров мы можем передать в методы различные данные,
    которые будут использоваться для вычислений ;
    - тело_метода { } - все действия которые он выполняет ;

    2.  Разница между void и return в том, что первый ничего не возвращает, причем если в качестве возвращаемого типа
    для метода определен любой другой, отличный от void, то метод обязательно должен использовать оператор return
    для возвращения значения.Возврат значения позволяет использовать это значение любым удобным способом,
    включая его печать или назначение переменной для дальнейшей обработки, в отличии от void которая просто
    выведет текст на экран.

    4. (String ... val) - когда мы не знаем точное количество элементов, но все эти элементы нужны для одной цели и будут одного типа
    например, String , используется многоточие...
    (String[]) array - такая инициализация идентична 1-ой.

    5.
    Статические методы отличаются от обычных тем, что они привязаны к классу, а не к объекту. Важным свойством
    статического метода является то, что он может обратиться только к статическим переменным/методам.
    Вызов статического метода : класс.метод()

    6. Классы-обертки позволяют рассширить функционал возможности использования разных методов к примитивам.

3. Подумать - почему мы не можем вернуть другой тип данных в методое.
*/


    /*1. Создать метод, внутри которого проихойдет вызов другого метода */
    public static void firstMethods () {

        System.out.println ( " I'm happy learning Java " );
    }


    public static void secondMethods () {

        firstMethods ( );
    }

    /*2. Создать метод А который принимает int значение. Если значение < 0 вызвать метод Б, если значение > 0 вызвать метод С,
    если значние 0 - вернуть 0. Что будут делать методы Б и С - не имеет значения */
    public static int methodA ( int value ) {

        if ( value < 0 ) {
            firstMethods ( );
        } else if ( value > 0 ) {
            secondMethods ( );
        } else {
            return 0;
        }
        return value;
    }

    /*
    3. Написать метод, который на вход принимает 3 числа. для квадратного уравнения.
    Вернуть сколько решений может иметь данное решение (Дискриминант)
     */
    public static void methodOfDiscriminant ( int a, int b, int c ) {

        System.out.println ( b * b - 4 * a * c );
    }
    /*
    4. Написать пару методов Math( 3 шт на твой выбор) которые будут делать противоположное от реализации.
            Math.increment(int val) возращает число ув. на 1, у тебя должно иметь точно такое же название, но уменьшать число на 1.
     */

    public static void methodMath ( int value ) {
        System.out.println ( Math.incrementExact ( value ) - 2 );
    }

    /*
    5. Создать метод, который на вход принимает стрингу.
Вернуть ответом - является ли строка числом или нет. Программа не должна выдавать ошибок.
     */

    public static void methodString ( String value ) {
        try {
            Integer.parseInt ( value );
            System.out.println ( "this is int" );
        } catch ( NumberFormatException e ) {
            System.out.println ( "this is string" );
        }
    }

    /*6. Создать метод, на вход передается строка и число, вернуть строку - которая изменяет значение символа по алфавиту (только англ) на число.
    Строка всегда в нижнем регистрел
        Пример: а, 1
        ответ b
        Пример aa, 2
        ответ сс
        и.т.д
         */

    public static void methodStringAndInteger ( String string, int value2 ) {
        System.out.println ( value2 > 0 && value2 < 27 ? String.valueOf ( ( char ) (value2 + 97) ) : null );
    }

    public static void main ( String[] args ) {
        firstMethods ( );
        secondMethods ( );
        methodA ( 5 );
        methodOfDiscriminant ( 5, 87, 45 );
        methodMath ( 2 );
        methodString ( "dsa" );
        methodStringAndInteger ( "aa", 2 );
    }
}
