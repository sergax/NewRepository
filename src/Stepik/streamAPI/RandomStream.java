package Stepik.streamAPI;

import java.util.stream.IntStream;
/*
Напишите метод, возвращающий стрим псевдослучайных целых чисел. Алгоритм генерации чисел следующий:

    Берется какое-то начальное неотрицательное число (оно будет передаваться в ваш метод проверяющей системой).
    Первый элемент последовательности устанавливается равным этому числу.
    Следующие элементы вычисляются по рекуррентной формуле Rn+1=mid(Rn2) R_{n+1}=\mathrm{mid}(R_{n}^2) Rn+1​=mid(Rn2​),
    где mid — это функция, выделяющая второй, третий и четвертый разряд переданного числа.
    Например, mid(123456)=345 \mathrm{mid}(123456) = 345 mid(123456)=345.

Алгоритм, конечно, дурацкий и не выдерживающий никакой критики, но для практики работы со стримами сойдет :)
Пример
pseudoRandomStream(13) должен вернуть стрим, состоящий из следующих чисел:

13, 16, 25, 62, 384, 745, 502, 200, 0, ... (дальше бесконечное количество нулей)
 */
public class RandomStream {
    public static void main(String[] args) {
        randomStream(13).limit(10).mapToObj(x -> " " + x).forEach(System.out::print);
    }

    public static IntStream randomStream(int seed) {
        return IntStream.iterate(seed, n -> (n * n) / 10 % 1000);
    }
}
